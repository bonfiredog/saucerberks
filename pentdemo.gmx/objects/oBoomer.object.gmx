<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sEnemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set the speed of the animation.
image_speed = 5/room_speed

//Get it going!
InitialiseEnemyCollision(100,360)

//Make them half the normal size
image_xscale = 1.0
image_yscale = image_xscale

image_alpha = 1.0

depth = -11

ThingsEaten = 0

HasBeenHit = false
Flashing = false
NumberOfFlashes = irandom_range(3,6)
TimeBetweenFlashes = 900 / room_speed
TimeOfFlash = 450 / room_speed

BoomerShot = false

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if oMenu.Mode = "Pause" {
speed = 0
image_speed = 0

} else {

speed = global.DiffBoomerSpeed
image_speed = 5 / room_speed
}


/* Collision */
//If a block is about to touch enemy, it's big enough to collide with...
SolidTouching = instance_place(x + hspeed, y + vspeed, oSolid)

if instance_exists(SolidTouching) and SolidTouching.image_xscale &gt; 0.9 {
//Remember the player's speed just before the collision. If they were not moving, set the speed to the standard player speed.
OriginalSpeed = global.DiffBoomerSpeed
//Change the player's direction to almost the opposite of what they hit, and set them as 'in the process of colliding'.

if speed &gt; 0 {
direction = direction - random_range(130,220)
} else if speed &lt;= 0 {
direction = point_direction(x,y,SolidTouching.x,SolidTouching.y) - random_range(130,220)
}
speed = OriginalSpeed
Colliding = true
}






/*Eat Globs From Wave Gun */
DetectionRange = 400
EatRange = 10

NearestGlob = instance_nearest(x,y,oGlob)

//If there IS a glob, find the closest!
if instance_exists(NearestGlob) {

//If it is within 400 pixels...
DistanceToGlob = point_distance(x,y,NearestGlob.x,NearestGlob.y)

if DistanceToGlob &lt; DetectionRange {
//Can I reach it?

if BoomerHaveLineOfSightTo(NearestGlob) {
    //Go towards it!
    direction = point_direction(x,y,NearestGlob.x,NearestGlob.y)
    
    //Then, when close enough, eat the glob if we are in range!
    if DistanceToGlob &lt; EatRange {
    //Is it attached to a Swarmer?
    if instance_exists(NearestGlob.Host) {
    //Tell it we're the one who ate it!
    NearestGlob.Host.Eater = id
    ThingsEaten = ThingsEaten + 1

        GrowthRate = 0.35
        MaximumSize = 2
        if image_xscale &lt; MaximumSize {
        image_xscale = image_xscale + GrowthRate
        image_yscale = image_yscale + GrowthRate
        if place_meeting(x,y,oSolid) {
          image_xscale = image_xscale - GrowthRate
        image_yscale = image_yscale - GrowthRate
        }
        
        }
        
        }
        
         
        with NearestGlob { instance_destroy() }
        
             }
       }
    }
            
}



/* Facing */
image_angle = direction

/* Bouncing */

StayInsideRoom()

/* Damage */

if instance_exists(oPlayer) and oPlayer.Stage = "Boomers" and place_meeting(x,y,oBullet) {
BoomerShot = true
}



if place_meeting(x,y,oBullet) and ThingsEaten &lt;= 0 and HasBeenHit = false {
HasBeenHit = true
Flashing = true
}



if Flashing = true and NumberOfFlashes &gt; 0 {
if TimeBetweenFlashes &gt; 0 {
TimeBetweenFlashes = TimeBetweenFlashes - 1
} else if TimeBetweenFlashes &lt;= 0 {
if TimeOfFlash &gt; 0 {
TimeOfFlash = TimeOfFlash - 1
sprite_index = sEnemyFlash
image_xscale = 1.2
image_yscale = image_xscale
} else if TimeOfFlash &lt;= 0 {
audio_play_sound(aNegShot,1,false)
TimeBetweenFlashes = 900 / room_speed
NumberOfFlashes = NumberOfFlashes - 1
TimeOfFlash = 450 / room_speed
sprite_index = sEnemy
image_xscale = 1.0
image_yscale = image_xscale
}
}
} else if NumberOfFlashes &lt;= 0 {
HasBeenHit = false
Flashing = false
sprite_index = sEnemy
image_xscale = 1.0
image_yscale = image_xscale
NumberOfFlashes = irandom_range(3,6)
TimeBetweenFlashes = 900 / room_speed
TimeOfFlash = 450 / room_speed
}

if HitByProjectile() or (place_meeting(x,y,oPlayer) and oPlayer.Undocking = true) or place_meeting(x,y,oGrenadeTargetExplosion){

     //If we have a swarmer inside us, explode
     if ThingsEaten &gt; 0 {
     audio_play_sound(aBoomerDeath, 1, false)
     global.NumberOfBoomersRemaining = global.NumberOfBoomersRemaining - 1
        if global.NumberOfBoomersRemaining &gt; 1 and room != rTutorial {
      oUI2.ShowBoomersRemaining = true
      }
     instance_destroy()
    
}
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
