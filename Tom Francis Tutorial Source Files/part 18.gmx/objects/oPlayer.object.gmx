<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayerLowerBody</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Facing = 0
WeaponCount = 0
SelectedWeaponIndex = 0
Power = 5
PowerMax = 75

ResetShunts()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/* Movement */

MySpeed = 300 / room_speed

speed = 0

if keyboard_check(ord('W')) {
    vspeed = -MySpeed
}
if keyboard_check(ord('S')) {
    vspeed = MySpeed
}
if keyboard_check(ord('A')) {
    hspeed = -MySpeed
}
if keyboard_check(ord('D')) {
    hspeed = MySpeed
}

image_speed = speed / 20

hspeed = hspeed + xShunt
vspeed = vspeed + yShunt
ResetShunts()


//If we're about to hit a block
if place_meeting(x + hspeed, y + vspeed, oSolid) {

    //Keep as much of our horizontal speed as possible
    OldHSpeed = hspeed
    hspeed = 0
    while
        place_meeting(x + hspeed + sign(OldHSpeed), y, oSolid) = false &amp;&amp; //Check there's still room if we crept a bit closer to our old hspeed
        abs(hspeed) &lt; abs(OldHSpeed) //Check we haven't restored all of our old hspeed, and only pay attention to the 'absolute' values, the magnitudes
    {
        //Creep towards old hspeed
        hspeed = hspeed + sign(OldHSpeed)
    }   
    
    //We have now figured out how much of our hspeed we can keep without hitting anything, so we're keeping that.

    //Keep as much of our horizontal speed as possible
    OldVSpeed = vspeed
    vspeed = 0
    while
        place_meeting(x + hspeed, y + vspeed + sign(OldVSpeed), oSolid) = false &amp;&amp; //Check there's still room if we crept a bit closer to our old vspeed
        abs(vspeed) &lt; abs(OldVSpeed) //Check we haven't restored all of our old vspeed, and only pay attention to the 'absolute' values, the magnitudes
    {
        //Creep towards old hspeed
        vspeed = vspeed + sign(OldVSpeed)
    }     

}

/* Weapon Switching */

if mouse_check_button_pressed(mb_right) {
    //Switch to the next weapon up
    SelectedWeaponIndex = SelectedWeaponIndex + 1
    //If we've gone too far, loop back
    if SelectedWeaponIndex &gt;= WeaponCount {
        SelectedWeaponIndex = 0
    }
}

/* Facing */

Facing = point_direction(x,y,mouse_x,mouse_y)


if Power &gt;= PowerMax {

    //go to next level
    SaveInventory()
    if room_exists(room_next(room)) room_goto_next()

} else {

    //Can pick up power
    PowerUpCollected = instance_place(x,y,oPowerUp)
    if instance_exists(PowerUpCollected) {
        with PowerUpCollected { instance_destroy() }
        Power = Power + 1
    }
    
}


/* Stay inside the room */

if x &lt; 0 { x = 0 }
if y &lt; 0 { y = 0 }
if x &gt; room_width { x = room_width }
if y &gt; room_height { y = room_height }


/* Death */

//Look for an enemy touching us
EnemyTouchingMe = instance_place(x,y,oEnemy)

//If there is one
if instance_exists(EnemyTouchingMe) {

    ScreenShake(80)
    ExplodeIntoANumberOfChunks(oGame.NumberOfBitsThePlayerIsMadeOf,oPlayerChunk)

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw our sprite normally, but facing our 'Facing' direction, without changing image_angle, so as not to affect collision. What. This makes sense. I'm not on trial here.

draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,direction,image_blend,image_alpha)

draw_sprite_ext(sPlayer,image_index,x,y,image_xscale,image_yscale,Facing,image_blend,image_alpha)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
