<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
ScreenShakeAmount = 0

/* Enemy Spawning */
SecondsBetweenEnemySpawns = 0.1
SecondsSinceLastEnemySpawn = 0
MaximumSwarmers = 500

/* Global constants */
BitsReassembled = 0
NumberOfBitsThePlayerIsMadeOf = 9
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Enemy spawning */
SecondsSinceLastEnemySpawn = SecondsSinceLastEnemySpawn + 1/room_speed

if SecondsSinceLastEnemySpawn &gt;= SecondsBetweenEnemySpawns {

    //If there aren't too many swarmers
    if instance_number(oSwarmer) &lt; MaximumSwarmers &amp;&amp; instance_number(oBoomer) &gt; 0 {
        
        //Choose where to spawn one
        if choose(true,false) {
            SpawnX = random(room_width)
            SpawnY = choose(0, room_height)
        } else {
            SpawnX = choose(0, room_width)
            SpawnY = random(room_height)
        }
        //Spawn one there
        instance_create(SpawnX, SpawnY, oSwarmer)
        
    }
    
    SecondsSinceLastEnemySpawn = 0
    
}


//If we've been told to shake the screen by any amount
if ScreenShakeAmount &gt; 0 {
    //Make sure that amount is being reduced each frame, so we stabilise eventually
    ScreenShakeAmount = ScreenShakeAmount - 3
} else {
    //If we've stabilised or never had any screenshake
    ScreenShakeAmount = 0
    //Note the position the view 'should' be in
    x = view_xview
    y = view_yview
}

//View position should wobble away from normal position by screneshake amount
//If it's zero, this will be perfectly stable
ShakeX = random_range(-ScreenShakeAmount,ScreenShakeAmount)
ShakeY = random_range(-ScreenShakeAmount,ScreenShakeAmount)
view_wview = global.ScreenWidth - abs(ShakeX)
view_hview = global.ScreenHeight - abs(ShakeY)
view_angle = 0 + (ShakeX/10)
view_xview = x + ShakeX
view_yview = y + ShakeY
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
