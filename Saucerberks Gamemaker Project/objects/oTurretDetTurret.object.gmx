<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sTurretDetTurret</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = 79
Owner = noone
SpinDirection = choose(-0.5,0.5)
State = "Idle"
TimeBeforeSpinChange = random_range(300,900)
TimeBetweenFlashes = 120
PlayerInRange = noone
Cooldown = 90
RatePerStepOfTurn = 2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(Owner)

//Make it 'stick' to the owner's position, and face the way they are facing.
{
dist = point_distance(0,0,-34,192)
angle = point_direction(0,0,-34,192)
x = Owner.x + lengthdir_x(dist, angle+Owner.image_angle)
y = Owner.y + lengthdir_y(dist, angle+Owner.image_angle)
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle = direction

if Cooldown &lt;= 0 {
Cooldown = 90
} else if Cooldown &gt; 0 {
Cooldown = Cooldown - 1
}

DetectionRange = 400
EnemyInRange = instance_nearest(x,y,oSwarmer)

if instance_exists(oPlayer) {
if point_distance(x,y,oPlayer.x,oPlayer.y) &lt;= DetectionRange {
PlayerInRange = oPlayer.id
} else {
PlayerInRange = noone
}
}

if PlayerInRange = noone {
if instance_exists(EnemyInRange) {
DistanceToNearestEnemy = point_distance(x,y,EnemyInRange.x,EnemyInRange.y)
if DistanceToNearestEnemy &lt; DetectionRange {
State = "Alert"
AlertType = "Enemy"
}
} else {
State = "Idle"
}
} else if instance_exists(oPlayer) and PlayerInRange = oPlayer.id {
State = "Alert"
AlertType = "Player"
} else {
State = "Idle" }


if State = "Idle" {
if TimeBeforeSpinChange &gt; 0 {
TimeBeforeSpinChange = TimeBeforeSpinChange - 1
} else if TimeBeforeSpinChange &lt;= 0 {
if SpinDirection = -0.5 {SpinDirection = 0.5 }
else if SpinDirection = 0.5 {SpinDirection = -0.5 }
TimeBeforeSpinChange = random_range(300,900)
}

direction = direction + SpinDirection

if TimeBetweenFlashes &gt; 0 {
TimeBetweenFlashes = TimeBetweenFlashes - 1}
else if TimeBetweenFlashes &lt;= 0 {
instance_create(x,y,oTurretLight)
TimeBetweenFlashes = 120
}

} else if State = "Alert" {
//If something is in range, turn to face it quickly, and fire upon it if there is line of sight.
if AlertType = "Enemy" {
DirectionOfEnemy = point_direction(x,y,EnemyInRange.x,EnemyInRange.y)
direction = DirectionOfEnemy
//If the enemy exists, is in range and we are not cooling down from a previous shot, shoot.
if instance_exists(EnemyInRange) and Cooldown &lt;= 0 {
ThisPulse = instance_create(x + lengthdir_x(62,image_angle),y + lengthdir_y(62,image_angle),oTurretDetTurretPulse)
ThisPulse.direction = direction
ThisPulse.image_angle = image_angle
} 

} else if AlertType = "Player" {
if instance_exists(oPlayer) {
if instance_exists(PlayerInRange)
//If the player is in range, first of all work out the angle between the current position and the player's position.
DirectionOfPlayer = point_direction(x,y,oPlayer.x,oPlayer.y)
direction = DirectionOfPlayer {
//If the player exists, is in range and we are not cooling down from a previous shot, shoot.
if instance_exists(oPlayer) and instance_exists(PlayerInRange) and Cooldown &lt;= 0 {
ThisPulse = instance_create(x + lengthdir_x(62,image_angle),y + lengthdir_y(62,image_angle),oTurretDetTurretPulse)
ThisPulse.direction = direction
ThisPulse.image_angle = image_angle
} 
}
}
}
if instance_exists(oTurretLight) = false{instance_create(x,y,oTurretLight)}
}


if instance_exists(Owner) = false {
if instance_exists(oTurretDet) {
Owner = oTurretDet.id 
}
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
