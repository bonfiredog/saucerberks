<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sExplodingEnemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set it going!

InitialiseEnemyCollision(30, random(360))

//Initially, it's idle.
State = "Idle"

image_xscale = 1.0
image_yscale = image_xscale
OriginalSize = 1.0
GoOverSize = 1.4

//Nobody is eating it yet.
Eater = noone

depth = -11


RunAwaySpeed = false
RunAwayCountdown = 0

InCurrentCollision = false

TurnedToTarget = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set initial for player detection.
PlayerInRangeDist = 300
NearestSwarmer = instance_nearest(x,y,oSwarmer)
PlayerSpeedIncreaseRange = 200

//This sets the Swarmer's three speeds contextually; its runaway speed if its running away, a faster speed if the Player is close by,
//and a normal speed for every other eventuality.
if RunAwaySpeed = false {
if instance_exists(oPlayer) and point_distance(x,y,oPlayer.x,oPlayer.y) &lt;= 200 {
speed = global.DiffSwarmerSpeed * 1.5 }
else {
speed = global.DiffSwarmerSpeed
}
} else if RunAwaySpeed = true {
speed = global.DiffSwarmerSpeed * 2.5
}

//To simulate 'passing over' Solids and other obstacles in their way, increase the size of the sprite when they are in contact with those objects.

SolidTouch = instance_place(x,y,oSolid)
SpecialSolidTouch = instance_place(x,y,oSpecialSolid)


if instance_exists(SpecialSolidTouch) or (instance_exists(SolidTouch) and SolidTouch.Collidable = true)
{
if image_xscale &lt; GoOverSize {
image_xscale += 0.008
image_yscale = image_xscale
}
} else {
if image_xscale &gt; OriginalSize {
image_xscale -= 0.03
image_yscale = image_xscale
}
}


//This stops the runaway speed after a certain amount of time.
if RunAwayCountdown &gt; 0 {
RunAwayCountdown = RunAwayCountdown - 1
} else if RunAwayCountdown &lt;= 0 {
RunAwaySpeed = false
}


/* Damage */
//Destroy the Swarmer if it is hit by a Projectile, if it touches the Player while they are 'undocking' (i.e. they are a missile)
//or if they are caught in the 'lethal' range of the GrenadeDet explosion.

if HitByProjectile() {
ScreenShake(15)
ExplodeIntoANumberOfChunks(50, oSwarmerChunk)
audio_play_sound(aDeath,1,false)
}

if (place_meeting(x + 200,y + 200,oPlayer) and oPlayer.Undocking = true) or (place_meeting (x - 200, y - 200,oPlayer) and oPlayer.Undocking = true)
{
ScreenShake(15)
ExplodeIntoANumberOfChunks(50, oSwarmerChunk)
audio_play_sound(aDeath,1,false)
}


if instance_exists(oPlayer) and place_meeting(x + oPlayer.hspeed,y + oPlayer.vspeed,oPlayer) and oPlayer.Undocking = true{
ScreenShake(15)
ExplodeIntoANumberOfChunks(50, oSwarmerChunk)
audio_play_sound(aDeath,1,false)
}
 

    
if place_meeting(x,y,oGrenadeTargetExplosion) and oGrenadeTargetExplosion.Harmless = false{
ScreenShake(15)
ExplodeIntoANumberOfChunks(50, oSwarmerChunk)
audio_play_sound(aDeath,1,false)
}





/* A.I. Stuff */


if State = "Idle" {
//Set it as 'eaten' if eaten, duh, plus set the sprite to the idle version.
sprite_index = sExplodingEnemy
if instance_exists(Eater) {
State = "Eaten"
} 
 

//if the player exists (to stop the code crashing),
//and they are in ranged and they aren't 'docked' (i.e. hidden) nor are they 'undocking' (i.e. a missile),
//alert this particular Swarmer.
if instance_exists(oPlayer) {
if point_distance(x,y,oPlayer.x,oPlayer.y) &lt; PlayerInRangeDist and oPlayer.Docked = false and oPlayer.Undocking = false{
State = "Alert"
}
}


//Work out which the nearest OTHER swarmer is, and if they are alert, and within a short distance, 
//alert too. This allows a sort of 'feeding frenzy' to spread through dense packs of Swarmers. 
if instance_exists(oPlayer) {
if instance_exists(NearestSwarmer) {
if point_distance(x,y,NearestSwarmer.x,NearestSwarmer.y) &lt; 20 and oPlayer.Undocking = false {
if NearestSwarmer.State = "Alert" {
State = "Alert"
}
}
}
}


//Regardless of all else, they can see the player if they have line of sight.
if instance_exists(oPlayer) {
if SwarmerHaveLineOfSightTo(oPlayer) and oPlayer.Undocking = false and oPlayer.Docked = false{    
State = "Alert"
}
}


} else if State = "Alert" {
    //Change the sprite to alert sprite.
sprite_index = sExplodingEnemyAlert
    
//Another instance of the 'Eaten' notification, for some reason. There could just be one of these?
if instance_exists(Eater) {
State = "Eaten"
}

//If they are in a crowd of alerted Swarmers, are close to the player or have line of sight (though why this 
//needs to be stated again I don't know, when it's already in the Idle loop) turn them towards the player.
if instance_exists(NearestSwarmer) and point_distance(x,y,NearestSwarmer.x,NearestSwarmer.y) &lt; 50 and NearestSwarmer.State = "Alert" {
if instance_exists(oPlayer) {
direction = point_direction(x,y,oPlayer.x,oPlayer.y)
}
}


else if instance_exists(oPlayer) and point_distance(x,y,oPlayer.x,oPlayer.y) &lt; PlayerInRangeDist {
direction = point_direction(x,y,oPlayer.x,oPlayer.y)
}


else if instance_exists(oPlayer) and SwarmerHaveLineOfSightTo(oPlayer) {
direction = point_direction(x,y,oPlayer.x,oPlayer.y)
} 
//Otherwise, send them back to Idle, and turn them in a random direction to boot. 
else {
State = "Idle"
direction = random(360)
}
    
} else if State = "Eaten" {
if instance_exists(Eater) {

//Move with the enemy that ate us
x = Eater.x
y = Eater.y
} else {
//If we are "Eaten", and we no longer have an Eater, it's been destroyed; destroy us as well, and make us explode
ExplodeIntoANumberOfChunks(45, oChunk2)
}
}


/* Facing */
image_angle = direction

/* Bouncing */

StayInsideRoom()





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// This draws the Tutorial text relative to the Swarmer's position, 
//if we are in the Tutorial and in the right Stage of the tutorial.

if room = rTutorial and instance_exists(oPlayer) {



if oPlayer.Stage = "Swarmers" {

posx = x
posy = y

draw_set_font(fTutorial)
draw_set_halign(fa_center)
draw_set_valign(fa_center)

draw_self()

draw_set_colour(c_red)
draw_circle(posx,posy, 140, true)
draw_set_colour(c_lime)
draw_text(posx, posy + 180, "What a horrid little alien!#You had better shoot her.")
} else {

draw_self()

}
} else {
//This is seemingly important to include if you have a draw event,
//as otherwise the actual sprite may not draw, even if you have specified text
//to draw on top of it. I still don't quite understand Draw events.
draw_self()
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
