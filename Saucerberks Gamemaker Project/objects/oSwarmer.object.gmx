<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sExplodingEnemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set it going!

InitialiseEnemyCollision(0, random(360))

State = "Idle"

image_xscale = 1.0
image_yscale = image_xscale

Eater = noone

depth = -11

RunAwaySpeed = false
RunAwayCountdown = 0

IsColliding = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>PlayerInRangeDist = 300
NearestSwarmer = instance_nearest(x,y,oSwarmer)
PlayerSpeedIncreaseRange = 200



if oMenu.Mode = "Pause" {
speed = 0 } 
else {
if RunAwaySpeed = false {
if instance_exists(oPlayer) and point_distance(x,y,oPlayer.x,oPlayer.y) &lt;= 200 {
speed = global.DiffSwarmerSpeed * 1.5 }
else {
speed = global.DiffSwarmerSpeed
}
} else if RunAwaySpeed = true {
speed = global.DiffSwarmerSpeed * 1.5
}
} 

if RunAwayCountdown &gt; 0 {
RunAwayCountdown = RunAwayCountdown - 1
} else if RunAwayCountdown &lt;= 0 {
RunAwaySpeed = false
}







/* A.I. Stuff */

if State = "Idle" {

sprite_index = sExplodingEnemy
if instance_exists(Eater) {
State = "Eaten"
} 
 
if instance_exists(oPlayer) {
if oPlayer.Docked = false and oPlayer.Undocking = false {
if point_distance(x,y,oPlayer.x,oPlayer.y) &lt; PlayerInRangeDist {
State = "Alert"
}
}
}

if instance_exists(oPlayer) {
if instance_exists(NearestSwarmer) and oPlayer.Docked = false and oPlayer.Undocking = false {
if point_distance(x,y,NearestSwarmer.x,NearestSwarmer.y) &lt; 20 {
if NearestSwarmer.State = "Alert" {
State = "Alert"
}
}
}
}


if instance_exists(oPlayer) {
if SwarmerHaveLineOfSightTo(oPlayer) and oPlayer.Docked = false and oPlayer.Undocking = false {    
State = "Alert"
}
}

} else if State = "Alert" {
    
sprite_index = sExplodingEnemyAlert
    
if instance_exists(Eater) {
State = "Eaten"
}

if instance_exists(NearestSwarmer) and point_distance(x,y,NearestSwarmer.x,NearestSwarmer.y) &lt; 50 and NearestSwarmer.State = "Alert" {
if instance_exists(oPlayer) and oPlayer.Docked = false and oPlayer.Undocking = false {
direction = point_direction(x,y,oPlayer.x,oPlayer.y)
}
}


else if instance_exists(oPlayer) and oPlayer.Docked = false and oPlayer.Undocking = false and point_distance(x,y,oPlayer.x,oPlayer.y) &lt; PlayerInRangeDist {
direction = point_direction(x,y,oPlayer.x,oPlayer.y)
}


else if instance_exists(oPlayer) and SwarmerHaveLineOfSightTo(oPlayer) and oPlayer.Docked = false and oPlayer.Undocking = false {
direction = point_direction(x,y,oPlayer.x,oPlayer.y)
} 

else {
State = "Idle"
direction = random(360)
}
    
} else if State = "Eaten" {
if instance_exists(Eater) {

//Move with the enemy that ate us
x = Eater.x
y = Eater.y
} else {
//If we are "Eaten", and we no longer have an Eater, it's been destroyed; destroy us as well, and make us explode
ExplodeIntoANumberOfChunks(45, oChunk2)
}
}


/* Facing */
image_angle = direction

/* Bouncing */

StayInsideRoom()

/* Collision */
//If a block is about to touch enemy, it's big enough to collide with...
SolidTouching = instance_place(x + hspeed, y + vspeed, oSolid)

if instance_exists(SolidTouching) and SolidTouching.image_xscale &gt; 0.8 {
//Remember the player's speed just before the collision. If they were not moving, set the speed to the standard player speed.
OriginalSpeed = global.DiffSwarmerSpeed
//Change the player's direction to almost the opposite of what they hit, and set them as 'in the process of colliding'.

if speed &gt; 0 {
direction = direction - random_range(130,220)
} else if speed &lt;= 0 {
direction = point_direction(x,y,SolidTouching.x,SolidTouching.y) - random_range(130,220)
}

speed = OriginalSpeed
}





/* Damage */

if HitByProjectile() {
ScreenShake(15)
ExplodeIntoANumberOfChunks(35, oSwarmerChunk)
audio_play_sound(aDeath,1,false)
}


if instance_exists(oPlayer) and place_meeting(x + oPlayer.hspeed,y + oPlayer.vspeed,oPlayer) and oPlayer.Undocking = true{
ScreenShake(15)
ExplodeIntoANumberOfChunks(35, oSwarmerChunk)
audio_play_sound(aDeath,1,false)
}
 

    
if place_meeting(x,y,oGrenadeTargetExplosion) and oGrenadeTargetExplosion.Harmless = false{
ScreenShake(15)
ExplodeIntoANumberOfChunks(35, oSwarmerChunk)
audio_play_sound(aDeath,1,false)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room = rTutorial and instance_exists(oPlayer) {



if oPlayer.Stage = "Swarmers" {

posx = x
posy = y

draw_set_font(fTutorial)
draw_set_halign(fa_center)
draw_set_valign(fa_center)

draw_self()

draw_set_colour(c_red)
draw_circle(posx,posy, 140, true)
draw_set_colour(c_lime)
draw_text(posx, posy + 180, "What a horrid little alien!#You had better shoot her.")
} else {

draw_self()

}
} else {
draw_self()
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0.600000023841858</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,26</point>
    <point>56,4</point>
    <point>60,56</point>
  </PhysicsShapePoints>
</object>
