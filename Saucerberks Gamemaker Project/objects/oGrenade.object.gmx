<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sGrenade</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -10

StepsBetweenFlashes = 30
Flashes = 0

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

/* delete bullet when outside of room */

if x &lt; 0 or y &lt; 0 or x &gt; room_width or y &gt; room_height {

instance_destroy()

}

//If we are ABOUT to hit a block, stop.
if place_meeting(x + hspeed, y + vspeed, oSolid) {

direction = direction + random_range(150,210)

}

//If we are ABOUT to hit a block, stop.
if place_meeting(x + hspeed, y + vspeed, oSpecialSolid) {

direction = direction + random_range(150,210)

}

//Deceleration
Deceleration = 800 / (room_speed * room_speed)
if speed &gt; Deceleration {
speed = speed - Deceleration
} else {
speed = 0
}



//If we have not flashed 3 times, and are therefore not exploding...
if speed = 0 {

if Flashes &lt; 4 {
//Count down to the next flash, 1 step at a time...
if StepsBetweenFlashes &gt; 0 {
sprite_index = sGrenade
StepsBetweenFlashes = StepsBetweenFlashes - 1
} else if StepsBetweenFlashes &lt;= 0 {
Flashes = Flashes + 1
//... then show the flash sprite, count the flash, and reset the timer...
sprite_index = sGrenadeFlash
audio_play_sound(aGrenadeBleep, 1, false)
StepsBetweenFlashes = 30

//Once we have gone over 3 flashes, explode
} 

} else if Flashes &gt;= 4 {

ExplodeIntoANumberOfChunks(50, oGrenadeBit)
ScreenShake(80)
audio_play_sound(aGrenadeExplosion, 1, false)
instance_create(x,y,oGrenadeExplosion)

}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
